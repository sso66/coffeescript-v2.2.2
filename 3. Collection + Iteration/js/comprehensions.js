// Generated by CoffeeScript 2.2.2
// Comprehensions
// With functional languages, you can iterate with operations like 'map', 'reduce' and
// 'compact'. Many of these operations have been added to JavaScript through libraries, such as
// Underscorejs and Lodash.js.

// But to gain maximum succinctness and flexbility, a language needs array comprehensions (also
// know as list comprehensions).

// Think of all the times you've looped over an array just to create another array based on
// the firs. For instance, to negate an arra of numbers in JavaScript you'd write the following:
var char, i, j, keypressed, len, negativeNumbers, num, positiveNumbers;

positiveNumbers = [1, 2, 3, 4];

negativeNumbers = [];

for (j = 0, len = positiveNumbers.length; j < len; j++) {
  i = positiveNumbers[j];
  console.log(negativeNumbers.push(-i));
}

console.log(negativeNumbers);

console.log('___ one-liner ___');

console.log(negativeNumbers = (function() {
  var k, len1, ref, results;
  ref = [1, 2, 3, 4];
  results = [];
  for (k = 0, len1 = ref.length; k < len1; k++) {
    num = ref[k];
    results.push(-num);
  }
  return results;
})());


// You can use the comprehension syntax with a conditional loop:
keypressed = ((function() {
  var results;
  results = [];
  while (char = handleKeyPress()) {
    results.push(char);
  }
  return results;
})());

// eof
